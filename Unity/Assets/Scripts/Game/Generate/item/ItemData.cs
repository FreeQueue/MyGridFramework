//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.item
{ 

public sealed partial class ItemData :  Bright.Config.BeanBase 
{
    public ItemData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = (item.ItemId)_json["id"].AsInt; }
        { if(!_json["img_asset_name"].IsString) { throw new SerializationException(); }  ImgAssetName = _json["img_asset_name"]; }
        { var __json0 = _json["properties"]; if(!__json0.IsArray) { throw new SerializationException(); } Properties = new System.Collections.Generic.List<item.Property>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { item.Property __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = item.Property.DeserializeProperty(__e0);  }  Properties.Add(__v0); }   }
        PostInit();
    }

    public ItemData(item.ItemId id, string img_asset_name, System.Collections.Generic.List<item.Property> properties ) 
    {
        this.Id = id;
        this.ImgAssetName = img_asset_name;
        this.Properties = properties;
        PostInit();
    }

    public static ItemData DeserializeItemData(JSONNode _json)
    {
        return new item.ItemData(_json);
    }

    public item.ItemId Id { get; private set; }
    /// <summary>
    /// 图片资源名
    /// </summary>
    public string ImgAssetName { get; private set; }
    /// <summary>
    /// 属性列表
    /// </summary>
    public System.Collections.Generic.List<item.Property> Properties { get; private set; }

    public const int __ID__ = 703992;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Properties) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Properties) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ImgAssetName:" + ImgAssetName + ","
        + "Properties:" + Bright.Common.StringUtil.CollectionToString(Properties) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
