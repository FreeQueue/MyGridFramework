//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.item
{ 

public sealed partial class TbRecipe
{
    private readonly List<item.RecipeData> _dataList;
    
    private Dictionary<(item.ItemId, item.ItemId), item.RecipeData> _dataMapUnion;

    public TbRecipe(JSONNode _json)
    {
        _dataList = new List<item.RecipeData>();
        
        foreach(JSONNode _row in _json.Children)
        {
            var _v = item.RecipeData.DeserializeRecipeData(_row);
            _dataList.Add(_v);
        }
        _dataMapUnion = new Dictionary<(item.ItemId, item.ItemId), item.RecipeData>();
        foreach(var _v in _dataList)
        {
            _dataMapUnion.Add((_v.Material1, _v.Material2), _v);
        }
        PostInit();
    }

    public List<item.RecipeData> DataList => _dataList;

    public item.RecipeData Get(item.ItemId material1, item.ItemId material2) => _dataMapUnion.TryGetValue((material1, material2), out item.RecipeData __v) ? __v : null;

    public void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var v in _dataList)
        {
            v.Resolve(_tables);
        }
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var v in _dataList)
        {
            v.TranslateText(translator);
        }
    }

    
    partial void PostInit();
    partial void PostResolve();
}

}