//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.item
{ 

public sealed partial class ToolProperty :  item.Property 
{
    public ToolProperty(JSONNode _json)  : base(_json) 
    {
        { if(!_json["tool_type"].IsNumber) { throw new SerializationException(); }  ToolType = (item.ToolType)_json["tool_type"].AsInt; }
        { if(!_json["damage"].IsNumber) { throw new SerializationException(); }  Damage = _json["damage"]; }
        { var _j = _json["max_durability"]; if (_j.Tag != JSONNodeType.None && _j.Tag != JSONNodeType.NullValue) { { if(!_j.IsNumber) { throw new SerializationException(); }  MaxDurability = _j; } } else { MaxDurability = null; } }
        PostInit();
    }

    public ToolProperty(item.ToolType tool_type, int damage, int? max_durability )  : base() 
    {
        this.ToolType = tool_type;
        this.Damage = damage;
        this.MaxDurability = max_durability;
        PostInit();
    }

    public static ToolProperty DeserializeToolProperty(JSONNode _json)
    {
        return new item.ToolProperty(_json);
    }

    /// <summary>
    /// 工具类型
    /// </summary>
    public item.ToolType ToolType { get; private set; }
    /// <summary>
    /// 伤害
    /// </summary>
    public int Damage { get; private set; }
    /// <summary>
    /// 最大耐久
    /// </summary>
    public int? MaxDurability { get; private set; }

    public const int __ID__ = 488795816;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "ToolType:" + ToolType + ","
        + "Damage:" + Damage + ","
        + "MaxDurability:" + MaxDurability + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
